@namespace pixel_wall_e.Components
@using Models

@code {
    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public int Height { get; set; }

    public PixelCell[,]? canvas;

    protected override void OnInitialized()
    {
        canvas = new PixelCell[Height, Width];
        for (int y = 0; y < Height; y++)
        {
            for (int x = 0; x < Width; x++)
            {
                canvas[y, x] = new PixelCell { X = y, Y = x };
            }
        }
    }

    public void SetPixel(int x, int y, string color)
    {
        if (x >= 0 && x < Height && y >= 0 && y < Width)
        {
            if (canvas != null)
            {
                canvas[x, y].Color = color;
                StateHasChanged();
            }
        }
    }

    public string GetPixel(int x, int y)
    {
        if (x >= 0 && x < Height && y >= 0 && y < Width)
        {
            return canvas?[x, y].Color ?? "#ddd";
        }

        return "#ddd";
    }
}

<div class="grid-container" style="display: grid; grid-template-columns: repeat(@Width, 16px); width: fit-content;">
    @for (int y = 0; y < Height; y++)
    {
        for (int x = 0; x < Width; x++)
        {
            if (canvas != null)
            {
                var cell = canvas[y, x];
                <div class="pixel-cell"
                    style="width: 16px; height: 16px; background-color: @cell.Color; border: 1px solid #ddd;">
                </div>
            }
        }
    }
</div>