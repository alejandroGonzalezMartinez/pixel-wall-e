@page "/"
@using pixel_wall_e.Compiler
@using pixel_wall_e.Models
@using pixel_wall_e.Components
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Forms

<div class="editor-area">
    <h3>Código</h3>
    <div class="code-editor-container">
        <div class="line-numbers" @ref="lineNumbersRef">
            @for (int i = 1; i <= userCode.Split('\n').Length; i++)
            {
                <div>@i</div>
            }
        </div>
        <textarea class="code-textarea"
                @ref="codeEditorRef"
                @bind="userCode"
                @bind:event="oninput"
                spellcheck="false"></textarea>
    </div>
    <div>
        <button @onclick="RunCode">Ejecutar</button>
        <button @onclick="ExportCode" style="margin-left: 10px;">Exportar</button>
        <InputFile OnChange="LoadFile" accept=".pw" />
    </div>
</div>

<div class="canvas-controls">
    <h3>Configuración del Canvas</h3>
    <label>
        Ancho:
        <input type="number" min="1" @bind="canvasWidth" />
    </label>
    <label style="margin-left: 10px;">
        Alto:
        <input type="number" min="1" @bind="canvasHeight" />
    </label>
    <button @onclick="ResizeCanvas" style="margin-left: 10px;">Aplicar</button>
</div>

<div class="canvas-area">
    <h3>Canvas</h3>
    <PixelCanvas @ref="canvasRef" Width="32" Height="32" />
</div>

<div class="console-area">
    <h3>Salida</h3>
    <pre>@consoleOutput</pre>
</div>

@code {
    private string userCode = "";

    private int canvasWidth = 32;
    private int canvasHeight = 32;

    private string consoleOutput = "";
    private PixelCanvas? canvasRef;

    private ElementReference codeEditorRef;
    private ElementReference lineNumbersRef;

    private void RunCode()
    {
        List<Statement> statements;
        try
        {
            var scanner = new Scanner(userCode);
            var tokens = scanner.ScanTokens();

            var parser = new Parser(tokens);
            statements = parser.Parse();
        }
        catch (Exception ex)
        {
            consoleOutput = $"[ERROR de análisis]: {ex.Message}";
            return;
        }

        if (canvasRef != null)
        {
            for (int y = 0; y < canvasRef.Height; y++)
            {
                for (int x = 0; x < canvasRef.Width; x++)
                {
                    if (canvasRef.canvas != null)
                        canvasRef.canvas[y, x] = new PixelCell { X = y, Y = x };
                }
            }

            InterpreterState state = new InterpreterState(canvasRef);
            var result = Interpreter.Interpret(statements, state);
            consoleOutput = result;
        }
    }

    private void ResizeCanvas()
    {
        if (canvasRef != null)
        {
            canvasRef.Resize(canvasWidth, canvasHeight);
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            string content = await reader.ReadToEndAsync();
            userCode = content;
        }
    }

    private async Task ExportCode()
    {
        await JS.InvokeVoidAsync("downloadFile", "codigo.pw", userCode);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("syncEditorScroll", codeEditorRef, lineNumbersRef);
        }
    }
}
