@page "/"
@using pixel_wall_e.Compiler
@using pixel_wall_e.Models
@using pixel_wall_e.Components
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Forms

<div class="editor-area">
    <h3>Código</h3>
    <textarea @bind="userCode" rows="15" cols="60" placeholder="Escribe tu código aquí..."></textarea>
    <br />
    <button @onclick="RunCode">Ejecutar</button>
    <button @onclick="ExportCode" style="margin-left: 10px;">Exportar</button>
    <InputFile OnChange="LoadFile" accept=".txt" />
</div>

<div class="canvas-controls">
    <h3>Configuración del Canvas</h3>
    <label>
        Ancho:
        <input type="number" min="1" @bind="canvasWidth" />
    </label>
    <label style="margin-left: 10px;">
        Alto:
        <input type="number" min="1" @bind="canvasHeight" />
    </label>
    <button @onclick="ResizeCanvas" style="margin-left: 10px;">Aplicar</button>
</div>

<div class="canvas-area">
    <h3>Canvas</h3>
    <PixelCanvas @ref="canvasRef" Width="32" Height="32" />
</div>

<div class="console-area">
    <h3>Salida</h3>
    <pre>@consoleOutput</pre>
</div>

@code {
    private string userCode = @"
        Spawn(0, 0)
        Color(""Black"")
        n <- 5
        k <- 3 + 3 * 10
        n <- k * 2
        actual_x <- GetActualX()
        i <- 0
        loop1
        DrawLine(1, 0, 1)
        i <- i + 1
        GoTo [loop1] (i < 10)
        Color(""Blue"")
        loop_ends_here";

        @* Spawn(10, 10)
        Color("Black")
        DrawCircle(0, 0, 4) *@

    private int canvasWidth = 32;
    private int canvasHeight = 32;

    private string consoleOutput = "";
    private PixelCanvas? canvasRef;

    private void RunCode()
    {
        try
        {
            var scanner = new Scanner(userCode);
            var tokens = scanner.ScanTokens();

            var parser = new Parser(tokens);
            var statements = parser.Parse();


            if (canvasRef != null)
            {
                for (int y = 0; y < canvasRef.Height; y++)
                {
                    for (int x = 0; x < canvasRef.Width; x++)
                    {
                        if (canvasRef.canvas != null)
                            canvasRef.canvas[y, x] = new PixelCell { X = y, Y = x };
                    }
                }

                InterpreterState state = new InterpreterState(canvasRef);
                Interpreter.Interpret(statements, state);

                consoleOutput = "Ejecución finalizada correctamente.";
            }
        }
        catch (Exception ex)
        {
            consoleOutput = $"[ERROR]: {ex.Message}";
        }
    }

    private void ResizeCanvas()
    {
        if (canvasRef != null)
        {
            canvasRef.Resize(canvasWidth, canvasHeight);
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            string content = await reader.ReadToEndAsync();

            userCode = content;
        }
    }

    private async Task ExportCode()
    {
        await JS.InvokeVoidAsync("downloadFile", "codigo.txt", userCode);
    }
}